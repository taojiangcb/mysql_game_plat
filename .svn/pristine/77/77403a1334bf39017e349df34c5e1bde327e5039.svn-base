import { Context } from "koa";
import sequelize = require("sequelize");
import { Transaction } from "sequelize";
import { IPlatConfig, BaseResp, Constant } from "../iProtocol";
import { platConfigService } from "../services/PlatConfigServices";
import { ERROR_CODE, ERROR_MSG } from "../ErrorCode";
import { platDB } from "../mysql_game_plat/DB";
import { ISysPlatConfigDAOAtt } from "../mysql_game_plat/tables/sys_plat_config";
import { ISysPromotion } from "../mysql_game_plat/tables/sys_promotion";
import { sys_admin_attr, sys_admin_table } from "../mysql_game_plat/tables/sys_admins";
import { platRedis } from "../redis_clients/PlatRedis";
import { writeLog } from "../util/LogToDB";
import { ADMINS_TYPE } from "../config/Define";


async function addWxConfig(ctx: Context, next) {
    var body = ctx.request.body;
    var attr: ISysPlatConfigDAOAtt = {
        plat_id: body.platId,
        game_id: body.gameId,
        game_name: body.gameName,
        power: body.power,
        config: body.config,
        server_config: body.server_config,
        openPresent: body.openPresent,
        status: 1,
    }

    var loginId: string = ctx.headers["sessionkey"];
    var canEditPlat: boolean = false;
    if (loginId) {
        canEditPlat = await platConfigService.isSuperAdmin(loginId);
    }

    if (!canEditPlat) {
        var adminInfo: sys_admin_attr[] = await platConfigService.selectAdminByGame(attr.game_id);
        if (adminInfo) {
            for (var i: number = 0; i < adminInfo.length; i++) {
                if (adminInfo[i].identity == loginId) {
                    canEditPlat = true;
                    return;
                }
            }
        }
    }

    /** * 是否可以编辑平台数据 */
    if (canEditPlat) {
        if (await platConfigService.validate_res(ctx)) {
            var res = await addConfig(attr);
            await writeLog(ctx, `保存平台:${JSON.stringify(res)}`);
            if (res) {
                ctx.response.body = new BaseResp(true, 0, "", res);
            }
            else {
                ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6101, "参数错误")
            }
        }
        else {
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
        }
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_1004, ERROR_MSG.ERROR_1004);
    }
}

async function getConfigTables(ctx: Context, next) {
    var body = ctx.request.body;
    var res: ISysPlatConfigDAOAtt[];
    var loginId: string = ctx.headers["sessionkey"];
    if (loginId) {
        var isSuper = await platConfigService.isSuperAdmin(loginId);
        if (isSuper) {
            res = await platDB.sysPlatServerConfigDAO.findAll();
        }
        else {
            var sqlCmd: string = `select c.* from sys_plat_config c, sys_admins a where a.identity='${loginId}'AND a.material like CONCAT('%',c.game_id,'%')`;
            res = await platDB.dbClient.query(sqlCmd, { type: 'SELECT' });
        }
    }
    if (res) {
        ctx.response.body = new BaseResp(true, 0, "", res);
    }
    else {
        ctx.response.body = new BaseResp(true, ERROR_CODE.PLAT_INFO_6001, "获取平台信息失败");
    }
}

async function getConfig(ctx: Context, next) {
    var body = ctx.request.body;
    var game_id: number = body.game_id;
    var plat_id: number = body.plat_id;
    var ipconfig: ISysPlatConfigDAOAtt = await platDB.sysPlatServerConfigDAO.find({
        where: {
            game_id: game_id,
            plat_id: plat_id
        }
    });
    if (ipconfig) {
        ctx.response.body = new BaseResp(true, 0, "", ipconfig);
    }
    else {
        ctx.response.body = new BaseResp(true, ERROR_CODE.PLAT_INFO_6001, "获取平台信息失败");
    }
}

/**
 * 
 * @param conData 
 */
async function addConfig(conData: ISysPlatConfigDAOAtt) {

    var ipconfig: any = await platDB.sysPlatServerConfigDAO.find({
        where: {
            game_id: conData.game_id,
            plat_id: conData.plat_id
        }
    })

    if (!ipconfig) {
        var a: [any, boolean] = await platDB.sysPlatServerConfigDAO.findOrCreate(
            {
                where: {
                    game_id: conData.game_id,
                    plat_id: conData.plat_id
                },
                defaults: {
                    plat_id: conData.plat_id,
                    game_id: conData.game_id,
                    game_name: conData.game_name,
                    power: conData.power,
                    openPresent: conData.openPresent,
                    status: 1,
                    config: conData.config,
                    server_config: conData.server_config,
                }
            }
        )
        ipconfig = a["0"];
    }
    else {
        ipconfig.plat_id = conData.plat_id;
        ipconfig.game_id = conData.game_id;
        ipconfig.game_name = conData.game_name;
        ipconfig.power = conData.power;
        ipconfig.openPresent = conData.openPresent;
        ipconfig.status = 1;
        ipconfig.config = conData.config;
        ipconfig.server_config = conData.server_config;
        ipconfig.modify_time = "NOW()";
        ipconfig.save();
    }
    return ipconfig;
}

async function addGame(ctx: Context, next) {
    var body = ctx.request.body;
    if (await platConfigService.validate_res(ctx)) {
        var gameName: string = body.gameName;
        var gameId: string = body.addGameId;
        if (gameName) {
            var gameRres = await platDB.sysPlatGameDAO.find({
                where: { game_name: gameName },
            })
            if (gameRres) {
                ctx.response.body = new BaseResp(true, 0, "", gameRres);
            }
            else {
                try {
                    var loginId: string = ctx.headers["sessionkey"];
                    var loginAdmin = await platConfigService.isSuperAdmin(loginId)
                    var t = await platDB.dbClient.transaction();
                    if (loginAdmin) {
                        try {
                            var createGame = await platDB.sysPlatGameDAO.create({ game_name: gameName, game_id: Number(gameId) }, { transaction: t });
                            // var materialIds:number[] = loginAdmin.material ? JSON.parse(loginAdmin.material) : [];
                            // materialIds.push(Number(gameId));
                            // loginAdmin.material = JSON.stringify(materialIds);
                            // await loginAdmin.save({transaction:t});
                            t.commit();
                        }
                        catch (e) {
                            t.rollback();
                        }
                    }
                    if (createGame) {
                        await writeLog(ctx, `添加游戏:${createGame.game_name}`);
                        ctx.response.body = new BaseResp(true, 0, "", createGame);
                    }
                    else {
                        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6102, ERROR_MSG.ERROR_PLAT_6102);
                    }
                }
                catch (e) {
                    ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6102, JSON.stringify(e));
                }
            }
        }
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
    }
}

async function deleteGame(ctx: Context, next) {
    var body = ctx.request.body;
    var game_id = body.gameId;

    if (await platConfigService.validate_res(ctx)) {
        var existAdmins = await platConfigService.selectAdminByGame(game_id);
        if (existAdmins && existAdmins.length > 0) {
            var admin_names: string[] = [];
            existAdmins.forEach(element => {
                admin_names.push(element.identity);
            });
            var msg: string = `${admin_names.join(",")}管理员包含了该游戏，请前往取消。`;
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6105, msg);
            return;
        }

        var gameInfo = await platDB.sysPlatGameDAO.findOne({ where: { game_id: game_id } });
        if (gameInfo) {
            var t = await platDB.dbClient.transaction();
            try {
                await platDB.sysPlatGameDAO.destroy({ where: { game_id: game_id }, transaction: t })
                await platDB.sysPlatServerConfigDAO.destroy({ where: { game_id: game_id }, transaction: t })
            }
            catch (e) {
                t.rollback();
                ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6104, e.toString());
            }
            t.commit();
            await writeLog(ctx, `删除游戏id:${game_id},游戏名称:${gameInfo.game_name}`);
            ctx.response.body = new BaseResp(true, 0, "");
        }
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
    }
}

/**
 * @param ctx 删除配置
 * @param next 
 */
async function deleteConfig(ctx: Context, next) {
    var body = ctx.request.body;
    if (await platConfigService.validate_res(ctx)) {
        var delCount = await platDB.sysPlatServerConfigDAO.destroy({
            where: { id: body.id }
        })
        if (delCount > 0) {
            await writeLog(ctx, `删除平台配置id:${body.id}`);
            ctx.response.body = new BaseResp(true, 0, "");
        }
        else {
            ctx.response.body = new BaseResp(false, 0, "");
        }
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
    }
}

async function getIosApps(ctx: Context, next) {
    var appinfos = await platDB.getIosAppCache();
    ctx.response.body = new BaseResp(true, 0, "", appinfos);
}

async function getAllGames(ctx: Context, next) {
    var allGames = await platDB.sysPlatGameDAO.findAll();
    if (allGames) {
        ctx.response.body = new BaseResp(true, 0, "", allGames);
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6103, ERROR_MSG.ERROR_PLAT_6103);
    }
}

async function getAllPromotion(ctx: Context, next) {
    if (await platConfigService.validate_res(ctx)) {
        var allPromotion = await platDB.sysPromotion.findAll();
        if (allPromotion) {
            ctx.response.body = new BaseResp(true, 0, "", allPromotion);
        }
        else {
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6103, ERROR_MSG.ERROR_PLAT_6103);
        }
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
    }
}

async function editPromotion(ctx: Context, next) {
    if (await platConfigService.validate_res(ctx)) {
        var body = ctx.request.body;
        var { id, gameId, platId, name, rate = 0, appId, button, channels = "", games = "", showtype = 0, page = "" } = body;
        if (!gameId || !platId || !button || !appId) {
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_PLAT_6103, ERROR_MSG.ERROR_PLAT_6103);
            return;
        }
        var promotion: ISysPromotion;
        if (id) {
            promotion = await platDB.sysPromotion.findOne({ where: { id: id } });
            promotion.game_id = gameId;
            promotion.plat_id = platId;
            promotion.name = name;
            promotion.rate = rate;
            promotion.appId = appId;
            promotion.button = button;
            promotion.channels = channels;
            promotion.games = games;
            promotion.showtype = showtype;
            promotion.page = page;
            await promotion.save();
        }
        else {
            promotion = await platDB.sysPromotion.create({
                game_id: gameId,
                plat_id: platId,
                name: name,
                rate: rate,
                appId: appId,
                button: button,
                channels: channels,
                games: games,
                showtype: showtype,
                page: page
            })
        }
        ctx.response.body = new BaseResp(true, 0, "", promotion);
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
    }
}

async function login(ctx: Context, next) {
    var body = ctx.request.body;
    if (body) {
        var identity: string = body.identity;
        var pwd: string = body.pwd;
        var employee: sys_admin_attr = await platConfigService.existEmployee(identity, pwd);
        if (employee) {
            var data: sys_admin_attr = {
                id: employee.id || 0,
                identity: employee.identity || "",
                material: employee.material || "",
                promise: employee.promise || "",
            }
            var session_key: string = employee.identity + Constant.REDIS_CONFIG_SESSION;
            if (session_key) {
                await platRedis.redis_client.setString(session_key, "true");
                await platRedis.redis_client.expire(session_key, 86400);
            }
            ctx.response.body = new BaseResp(true, 0, "", data);
        }
        else {
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_1001, ERROR_MSG.ERROR_1001);
        }
    }
}

/** 
 *  添加管理员
 * @param ctx           
 * @param next 
 */
async function addAdmin(ctx: Context, next) {
    var body = ctx.request.body;
    if (body.identity && body.pwd) {
        var loginId: string = ctx.headers["sessionkey"];
        var material: string = body.selectGames ? JSON.stringify(body.selectGames) : "";
        if (loginId) {
            var user_adm: sys_admin_attr = await platDB.sysAdminDAO.findOne({ where: { identity: loginId } });
            if (user_adm && user_adm.promise == ADMINS_TYPE.admin) {
                var old: sys_admin_table = await platDB.sysAdminDAO.findOne({ where: { identity: body.identity } });
                if (old) {
                    ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_1002, ERROR_MSG.ERROR_1002);
                }
                else {
                    //添加用户成功
                    var res: sys_admin_table = await platDB.sysAdminDAO.create({
                        identity: body.identity,
                        pwd: body.pwd,
                        material: material
                    });
                    ctx.response.body = new BaseResp(true, 0, "");
                }
            }
            else {
                ctx.response.body = new BaseResp(true, ERROR_CODE.ERROR_1003, ERROR_MSG.ERROR_1003);
            }
        }
    }
}

/**删除用户 */
async function delAdmin(ctx: Context, next) {
    var body = ctx.request.body;
    if (body.identity && body.pwd) {
        var loginId: string = ctx.headers["sessionkey"];
        if (loginId) {
            var isSuperAdmin = await platConfigService.isSuperAdmin(loginId);
            if (isSuperAdmin) {
                var del = await platDB.sysAdminDAO.destroy({ where: { identity: body.identity } });
                if (del) {
                    ctx.response.body = new BaseResp(true, 0, "");
                }
                else {
                    ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_1002, ERROR_MSG.ERROR_1002);
                }
            }
        }
        else {
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
        }
    }
}

/**更新管理员信息 */
async function modfiyPassword(ctx: Context, next) {
    var body = ctx.request.body;
    if (body.identity && body.pwd) {
        var loginId: string = ctx.headers["sessionkey"];
        if (loginId) {
            var user_adm: sys_admin_attr = await platDB.sysAdminDAO.findOne({ where: { identity: loginId } });
            if (user_adm) {
                var old: sys_admin_table = await platDB.sysAdminDAO.findOne({ where: { identity: body.identity } });
                if (old) {
                    old.pwd = body.pwd;
                    await old.save();
                    ctx.response.body = new BaseResp(true, 0, "");
                }
                else {
                    ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_1002, ERROR_MSG.ERROR_1002);
                }
            }
        }
        else {
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_5000, ERROR_MSG.ERROR_5000);
        }
    }
}

/**更新游戏资产 */
async function modfiyMaterial(ctx: Context, next) {
    var body = ctx.request.body;
    if (body.identity && body.material) {
        var loginId: string = ctx.headers["sessionkey"];
        if (loginId) {
            if (platConfigService.isSuperAdmin(loginId)) {
                var old: sys_admin_table = await platDB.sysAdminDAO.findOne({ where: { identity: body.identity } });
                if (old) {
                    old.material = JSON.stringify(body.material);
                    await old.save();
                    ctx.response.body = new BaseResp(true, 0, "");
                }
                else {
                    ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_5000, ERROR_MSG.ERROR_5000);
                }
            }
            else {
                ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_1004, ERROR_MSG.ERROR_1004);
            }
        }
        else {
            ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_10, ERROR_MSG.ERROR_10);
        }
    }
    else {
        ctx.response.body = new BaseResp(false, ERROR_CODE.ERROR_5000, ERROR_MSG.ERROR_5000);
    }
}

/**
 * @param ctx       所有用户管理员
 * @param next 
 */
async function allAdmin(ctx: Context, next) {
    var loginId: string = ctx.headers["sessionkey"];
    if (loginId) {
        if (platConfigService.isSuperAdmin(loginId)) {
            var users: sys_admin_attr[] = await platDB.sysAdminDAO.all();
            if (users) {
                ctx.response.body = new BaseResp(true, 0, "", users);
            }
            else {
                ctx.response.body = new BaseResp(false, 0, ERROR_MSG.ERROR_5001);
            }
        }
        else {
            ctx.response.body = new BaseResp(false, 0, ERROR_MSG.ERROR_1003);
        }
    }
    else {
        ctx.response.body = new BaseResp(false, 0, ERROR_MSG.ERROR_10);
    }
}

module.exports = {
    "POST /Game/addWxConfig": addWxConfig,
    "POST /Game/configTables": getConfigTables,
    "POST /Game/getConfig": getConfig,
    "POST /Game/addGame": addGame,
    "POST /Game/allGames": getAllGames,
    "POST /Game/deleteGame": deleteGame,
    "POST /Game/deleteConfig": deleteConfig,
    "POST /Game/getIosApps": getIosApps,
    "POST /Game/getAllPromotion": getAllPromotion,
    "POST /Game/editPromotion": editPromotion,
    "POST /Game/addAdmin": addAdmin,
    "POST /Game/modfiyAdmin": modfiyPassword,
    "POST /Game/login": login,
    "POST /Game/allAdmin": allAdmin,
    "POST /Game/modfiyMaterial": modfiyMaterial,
    "POST /Game/delAdmin": delAdmin,
}