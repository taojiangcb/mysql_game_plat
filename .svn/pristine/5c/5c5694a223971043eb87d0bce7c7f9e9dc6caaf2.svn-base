"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize = require("sequelize");
const MySqlDefine_1 = require("../MySqlDefine");
const MySqlClient_1 = require("../../database/mysqlDao/MySqlClient");
exports.tableName = MySqlDefine_1.TABLE_NAME.sys_admins;
exports.column = {
    id: { type: sequelize.INTEGER(10), primaryKey: true },
    identity: { type: sequelize.STRING(255), allowNull: true },
    pwd: { type: sequelize.STRING(255), allowNull: true },
    material: { type: sequelize.STRING(255), allowNull: true },
    createTime: { type: sequelize.DATE, get() {
            return new Date(this.getDataValue("createTime")).getTime();
        } },
    updateTime: { type: sequelize.DATE, get() {
            return new Date(this.getDataValue("updateTime")).getTime();
        } },
    promise: { type: sequelize.ENUM, values: ['超级管理员', '游戏管理员'] },
};
/**
 * Hook（也称为生命周期事件）是执行 sequelize 调用之前和之后调用的函数。 例如，如果要在保存模型之前始终设置值，可以添加一个 beforeUpdate hook。
 */
var hooks = {};
exports.opts = MySqlClient_1.defColumnOpts;
exports.sync_opt = MySqlClient_1.defSyncOpts;
//# sourceMappingURL=sys_admins.js.map