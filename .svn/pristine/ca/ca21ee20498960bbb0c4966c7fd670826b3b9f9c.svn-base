"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const SequelizeConfig_1 = require("./SequelizeConfig");
const RespBase_1 = require("../resp/RespBase");
const ErrorCode_1 = require("../config/ErrorCode");
const Define_1 = require("../config/Define");
const PlatBase_1 = require("../plats/PlatBase");
//import { SequelizeConfig } from "../config/SequelizeConfig";
function getPlatUser(platId, userid) {
    return __awaiter(this, void 0, void 0, function* () {
        let userTable = SequelizeConfig_1.sequelizeInst.getTable(SequelizeConfig_1.TablesNames.sys_user);
        return userTable.findOne({
            where: {
                plat_id: platId,
                userId: userid
            }
        });
    });
}
function createUser(platId, userId, zxId, gameId, name, avatar, userKey) {
    return __awaiter(this, void 0, void 0, function* () {
        var t = yield SequelizeConfig_1.sequelizeInst.sequelize.transaction();
        try {
            let userGame = SequelizeConfig_1.sequelizeInst.getTable(SequelizeConfig_1.TablesNames.sys_user_game);
            let users = SequelizeConfig_1.sequelizeInst.getTable(SequelizeConfig_1.TablesNames.sys_user);
            let platUser = SequelizeConfig_1.sequelizeInst.getTable(SequelizeConfig_1.TablesNames.sys_user_plat);
            yield userGame.create({ zx_id: zxId, game_id: gameId, plat_id: platId }, { transaction: t });
            yield users.create({ zx_id: zxId, user_name: name, avatar: avatar }, { transaction: t });
            yield platUser.create({ zx_id: zxId, userId: userId, plat_id: platId }, { transaction: t });
            t.commit();
            let token = yield PlatBase_1.PlatBaseServer.getToken(zxId);
            let respData = {
                user: new Define_1.SDKUser(zxId, name, avatar, token, 0),
                platUser: new Define_1.PlatUser(userId, userKey)
            };
            return new RespBase_1.RespBase(true);
        }
        catch (e) {
            !t["finished"] && t.rollback();
            return new RespBase_1.RespBase(false, ErrorCode_1.ErrorCode.ERR_1001);
        }
    });
}
function sys_user_table() {
    return SequelizeConfig_1.sequelizeInst.getTable[SequelizeConfig_1.TablesNames.sys_user];
}
function sys_user_game_table() {
    return SequelizeConfig_1.sequelizeInst.getTable[SequelizeConfig_1.TablesNames.sys_user_game];
}
function sys_user_plat_table() {
    return SequelizeConfig_1.sequelizeInst.getTable[SequelizeConfig_1.TablesNames.sys_user_plat];
}
function sys_recharge_log_table() {
    return SequelizeConfig_1.sequelizeInst.getTable[SequelizeConfig_1.TablesNames.sys_recharge_log];
}
exports.DBTools = {
    getPlatUser: getPlatUser,
    createUser: createUser,
    sys_user_table: sys_user_table,
    sys_user_game_table: sys_user_game_table,
    sys_user_plat_table: sys_user_plat_table,
    sys_recharge_log_table: sys_recharge_log_table
};
//# sourceMappingURL=DBTools.js.map