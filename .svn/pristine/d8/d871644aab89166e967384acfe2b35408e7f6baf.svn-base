"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Koa = require("koa");
const Router = require("koa-router");
const fs = require("fs");
const Define_1 = require("./src/config/Define");
const Log_1 = require("./src/log/Log");
const path = require("path");
const MySqlDBMgr_1 = require("./src/database/mysqlDao/MySqlDBMgr");
const MySqlDefine_1 = require("./src/mysql_game_plat/MySqlDefine");
const DB_1 = require("./src/mysql_game_plat/DB");
const PlatRedis_1 = require("./src/redis_clients/PlatRedis");
const RedisHelp_1 = require("./src/database/redisBase/RedisHelp");
const login_validate_1 = require("./src/middlewares/login_validate");
const bodyparser = require("koa-bodyparser");
const koaCors = require("koa-cors");
let app = new Koa();
let router = new Router();
let svrPath = "/src/servers";
Define_1.Define.rootPath = __dirname;
/**
 * 当node 进程崩溃的时候处理
 */
process.addListener("uncaughtException", (err) => {
    if (err.message) {
        console.log(err.message);
    }
    if (err.stack) {
        console.log(err.stack);
    }
});
/**
 * 当node 进程退出时候处理
 */
process.addListener("exit", (code) => {
    console.log("exit code" + code);
});
/**初始化Http服务接口 */
function initHttpServers() {
    var server_files;
    var files = fs.readdirSync(`${__dirname}${svrPath}`);
    server_files = files.filter((f) => {
        return f.endsWith(".js");
    }, this);
    server_files.forEach(f => {
        let mapping = require(`${__dirname}${svrPath}/${f}`);
        for (var url in mapping) {
            if (url.startsWith("GET")) {
                let funs = url.split(/\s+/i);
                router.get(funs[1], mapping[url]);
                console.log(funs);
            }
            else if (url.startsWith("POST")) {
                let funs = url.split(/\s+/i);
                router.post(funs[1], mapping[url]);
                console.log(funs);
            }
            else {
                console.log("未知服务:" + url);
            }
        }
    });
}
var config_path = `config_${process.env.NODE_ENV}.json`;
exports.config = JSON.parse(fs.readFileSync(__dirname + '/' + config_path).toString());
var define_pro = Define_1.Define;
var overrideDefine = Object.assign(define_pro, exports.config.setting);
for (const key in overrideDefine) {
    if (overrideDefine.hasOwnProperty(key)) {
        const element = overrideDefine[key];
        Define_1.Define[key] = element;
    }
}
console.log(Define_1.Define);
function appStart() {
    return __awaiter(this, void 0, void 0, function* () {
        /** 初始化数据库 */
        DB_1.platDB.mysql_client = yield MySqlDBMgr_1.mySqlMgr.createMySql(MySqlDefine_1.game_plat_define.opts());
        var module_url = path.join(__dirname, "src/mysql_game_plat/tables");
        yield DB_1.platDB.mysql_client.loadModel(module_url);
        /**Redis  */
        var redisOpt = {
            host: exports.config.redis.ip,
            port: exports.config.redis.port,
            auth_pass: exports.config.redis.flag.auth_pass,
            db: exports.config.redis.select
        };
        var redisHelp = new RedisHelp_1.RedisHelp();
        yield redisHelp.init(redisOpt);
        PlatRedis_1.platRedis.redis_client = redisHelp;
        initHttpServers();
        app.use(koaCors({ credentials: true }));
        app.use(bodyparser({ enableTypes: ["json", "from", "xml"] }));
        app.use(login_validate_1.login_validate);
        app.use(router.routes());
        app.listen(Define_1.Define.port);
        Log_1.Log.infoLog(`server runing on port ${Define_1.Define.port}`);
    });
}
appStart();
//# sourceMappingURL=app.js.map