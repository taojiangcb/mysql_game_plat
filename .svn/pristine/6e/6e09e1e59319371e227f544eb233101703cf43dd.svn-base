"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize = require("sequelize");
const fs = require("fs");
const path = require("path");
/**
 * 默认全局的mysql 表配置
 */
exports.defColumnOpts = {
    timestamps: true
};
class MySqlDAO {
    constructor() { }
    connection(opt) {
        return __awaiter(this, void 0, void 0, function* () {
            this.dataServer = new sequelize(opt);
            return this.dataServer.authenticate();
            this.dataServer.close();
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.dataServer) {
                yield this.dataServer.close();
            }
        });
    }
    loadModel(dir) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let files = fs.readdirSync(dir);
                let jsFiles = files.filter((name, index, args) => {
                    return name.endsWith(".js");
                });
                jsFiles.forEach(f => {
                    console.log(`import model from file ${f}...`);
                    let name = f.substr(0, f.length - 3);
                    let d = require(path.join(dir, f));
                    if (d && d.modle) {
                        var tableName = d.tableName;
                        var tableColumn = d.column;
                        var opts = d.opts;
                        this.defineTable(tableName, tableColumn, opts);
                        console.log(d);
                    }
                });
            });
        });
    }
    defineTable(name, attr, opts) {
        var dataModuel = this.dataServer.define(name, attr, opts);
        this.tables[name] = dataModuel;
    }
    getTable(key) {
        return this.tables[key];
    }
}
exports.MySqlDAO = MySqlDAO;
//# sourceMappingURL=MySqlDAO.js.map